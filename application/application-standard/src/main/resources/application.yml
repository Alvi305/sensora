server:
  port: 9200

spring:
  config:
    import:
      - optional:classpath:entity-template.yml
  main:
    allow-bean-definition-overriding: true
  jackson:
    default-property-inclusion: non_null
    property-naming-strategy: SNAKE_CASE
    mapper:
      accept-case-insensitive-enums: true
  jpa:
    show-sql: false
    properties:
      jakarta.persistence.query.timeout: "${JAVAX_PERSISTENCE_QUERY_TIMEOUT:30000}" # General timeout for JDBC queries
      hibernate.type.wrapper_array_handling: ALLOW
      hibernate.naming.physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
  datasource:
    url: "${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5452/sensora}"
    username: "${SPRING_DATASOURCE_USERNAME:wiggles}"
    password: "${SPRING_DATASOURCE_PASSWORD:titusgay}"
    driverClassName: "${SPRING_DATASOURCE_DRIVER_CLASS_NAME:org.postgresql.Driver}"
    #    url: "${SPRING_DATASOURCE_URL:jdbc:h2:file:~/beaver-iot/h2/beaver;AUTO_SERVER=TRUE;DB_CLOSE_DELAY=-1}"
    #    username: "${SPRING_DATASOURCE_USERNAME:sa}"
    #    password: "${SPRING_DATASOURCE_PASSWORD:}"
    #    driverClassName: "${SPRING_DATASOURCE_DRIVER_CLASS_NAME:org.h2.Driver}"
    hikari:
      connection-timeout: 5000
  liquibase:
    enabled: true
    contexts: init,dev,prod,test
    change-log: classpath:db/postgres/changelog.yaml
#  h2:
#    console:
#      enabled: ${SPRING_H2_CONSOLE_ENABLED:false}
#      path: /public/h2-console
#      settings:
#        webAllowOthers: true
  cache:
    #    type: caffeine
    #    cache-names: "resource:data-pre-sign"
    caffeine:
      spec: maximumSize=50000,expireAfterWrite=${spring.cache.specs.time-to-live:1h}
    redis:
      cache-null-values: true
      value-serializer-class: org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer
      time-to-live: ${spring.cache.specs.time-to-live:1h}
    specs:
      time-to-live: 1h
      time-to-lives:
        '[resource:data-pre-sign]': ${resource.pre_sign_expire}
        '[resource:data]': 2m
        '[entity:latest-value]': 15m

  redis:
    ssl: ${REDIS_SSL:false}
    host: ${REDIS_HOST:}
    password: ${REDIS_PASSWORD:}
    port: ${REDIS_PORT:6379}
    database: ${REDIS_DB:0}
    redisson:
      config: |
        singleServerConfig:
          address: "${spring.redis.host}"
          password: "${spring.redis.password}"
          clientName: null
          database: ${REDIS_DB:0}
          idleConnectionTimeout: 10000
          connectTimeout: 10000
          timeout: 10000
          retryAttempts: 3
          connectionMinimumIdleSize: 10
          pingConnectionInterval: 10000
        threads: 32
        nettyThreads: 64
        codec:
          class: "org.redisson.codec.JsonJacksonCodec"
        transportMode: "NIO"
  # i18n
  messages:
    basename: i18n/messages
    cache-duration: 3600

task:
  executor:
    max-queue-capacity: 1024
    pool:
      default:
        core-size: 16
        max-size: 32
        queue-capacity: 256
      mqtt:
        max-size: 32
      mqtt-subscriber:
        core-size: 32
        max-size: 64
        rejected-policy: block_policy

management:
  endpoints:
    web:
      exposure:
        include: "health,metrics,prometheus,info"
        exclude: shutdown,beans
  metrics:
    enable:
      logback: false
      spring.data: false
      spring.security: false
      disk: false
#eventbus:
#  execution:
#    core-pool-size: 16
#    max-pool-size: 50
#    queue-capacity: 1000
camel:
  springboot:
    routes-include-pattern: classpath:routes/*.yaml
  rule:
    components:
      entry:
        - name: "simpleTimer"
          title: "Timer"
        - name: "trigger"
          title: "Trigger"
        - name: "eventListener"
          title: "Event Listener"
        - name: "simpleMqtt"
          title: "MQTT"
        - name: "httpIn"
          title: "HTTP in"
      control:
        - name: "choice"
          title: "IF/ELSE"
      action:
        - name: "entityAssigner"
          title: "Entity Assigner"
        - name: "entitySelector"
          title: "Entity Selector"
        - name: "serviceInvocation"
          title: "Service Invocation"
        - name: "code"
          title: "Code"
      external:
        - name: "email"
          title: "email"
        - name: "webhook"
          title: "Webhook"
        - name: "output"
          title: "Output Node"
        - name: "httpRequest"
          title: "Http Request"
    languages:
      - code:
          - "groovy"
          - "javascript"
          - "python"
          - "mvel"
      - "choice":
          - "jsonPath"
          - "groovy"
          - "javascript"
          - "python"
          - "mvel"

workflow:
  rate-limit:
    enabled: false
    timeout: 3000
    tenant-concurrency:
      default: 5

websocket:
  enabled: true
  port: ${WEBSOCKET_PORT:9201}
  context-path: ${WEBSOCKET_CONTEXT_PATH:/websocket}
oauth2:
  registered-client-id: ${OAUTH2_REGISTERED_CLIENT_ID:default}
  client-id: ${OAUTH2_CLIENT_ID:iab}
  client-secret: ${OAUTH2_CLIENT_SECRET:milesight*iab}
  rsa:
    private-key: ${OAUTH2_RSA_PRIVATE_KEY:}
    public-key: ${OAUTH2_RSA_PUBLIC_KEY:}
  ignore-urls:
    - "/oauth2/token"
    - "/user/register"
    - "/user/status"
    - "/public/**"
    - "/actuator/**"
    - "/db-resource/**"
    - "/workflow-http-in/**"

mqtt:
  broker:
    mqtt_port: 1883
    mqtts_port: 8883
    ws_path: /mqtt
    ws_port: 8083
    moquette:
      port: ${mqtt.broker.mqtt_port:1883}
      host: 0.0.0.0
      allow_anonymous: false
      persistence_enabled: false
      websocket_port: ${mqtt.broker.ws_port:8083}
      websocket_path: ${mqtt.broker.ws_path:/mqtt}
      netty:
        mqtt:
          message_size: 1048576
    tls:
      enabled: true
      keyStorePath : "${KEYSTORE_PATH:}"
      keyStorePassword : "${KS_PASSWD:}"
      keystoreType: "${KS_TYPE:PKCS12}"

      clientAuth: false
      truststorePath: "${TRUSTSTORE_PATH}"
      truststorePassword: "${TS_PASSWD}"
      trustStoreType: "${TS_TYPE:PKCS12}"


resource:
  storage: ${RESOURCE_STORAGE:db}
  pre_sign_expire: 15m
  s3:
    endpoint: ${RESOURCE_STORAGE_S3_ENDPOINT:} # starts with http / https
    region: ${RESOURCE_STORAGE_S3_REGION:}
    access_key: ${RESOURCE_STORAGE_S3_ACCESS_KEY:}
    access_secret: ${RESOURCE_STORAGE_S3_ACCESS_SECRET:}
    bucket: ${RESOURCE_STORAGE_S3_BUCKET:}

application:
  version: ${beaver-iot.version}

blueprint:
  library:
    default_address:
      type: GITHUB
      url: https://github.com/zakersimonjack/beaver-iot-blueprint.git
      branch: main
    sync_frequency: 3h
    clean_frequency: 1d

logging:
  level:
    com.milesight.beaveriot: ${LOGGING_LEVEL_BEAVER_IOT:info}

